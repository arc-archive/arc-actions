import { ActionType, OperatorEnum, IteratorConfiguration } from "@advanced-rest-client/arc-types/src/actions/Actions";
import { ArcBaseRequest, ARCHistoryRequest, ARCSavedRequest, TransportRequest } from "@advanced-rest-client/arc-types/src/request/ArcRequest";
import { ErrorResponse, Response } from "@advanced-rest-client/arc-types/src/request/ArcResponse";

export declare interface DataExtractorInit {
  /**
   * The request object generated by the request editor.
   */
  request: ArcBaseRequest | ARCSavedRequest | ARCHistoryRequest;
  /**
   * The request object representing the actual request that has been executed by the transport library.
   * Will not be available for the request actions.
   */
  executedRequest?: TransportRequest;
  /**
   * The response generated by the transport library.
   * Will not be available for the request actions.
   */
  response?: Response | ErrorResponse;
}

export declare interface ArcExecutableInit {
  /**
   * The request originating from the request editor. The source of the HTTP request configuration.
   */
  request?: ArcBaseRequest | ARCSavedRequest | ARCHistoryRequest;
  /**
   * The request object representing the actual request that has been executed by the transport library.
   */
  executedRequest?: TransportRequest;
  /**
   * The response generated by the transport library.
   */
  response?: Response | ErrorResponse;
}

export declare interface ActionsRunnerInit {
  /**
   * A node to be used to dispatch events on.
   */
  eventsTarget: EventTarget;
  /**
   * A reference to Jexl object. When set `jexlPath` is not needed.
   */
  jexl: any;
}

export declare interface InputOptions {
  outlined?: boolean;
  compatibility?: boolean;
  disabled?: boolean;
  readOnly?: boolean;
  /**
   * When set it notifies given path.
   */
  notify?: string;
  render?: string;
}

export declare interface CheckboxConfiguration extends InputOptions {
  name?: string;
}

export declare interface BaseTemplateOptions extends InputOptions {
  /**
   * Selection or change handler function
   */
  handler?: Function;
}

export declare interface DataSourceTypeSelectorOptions extends BaseTemplateOptions {
  /**
   * Currently selected option.
   */
  selected: ActionType;
  /**
   * input name
   */
  name?: string;
}

export declare interface OperatorTemplateOptions extends BaseTemplateOptions {
  /**
   * Currently selected value
   */
  operator: OperatorEnum;
  /**
   * input name
   */
  name?: string;
}
export declare interface IteratorTemplateOptions extends BaseTemplateOptions {
  /**
   * Iterator configuration
   */
  config: IteratorConfiguration;
  /**
   * Handler for the inputs change event
   */
  inputHandler: Function;

  /**
   * Handler for the operator selection event
   */
  operatorHandler: Function;
}

/**
 * An enum representing a list of supported in this runner/editor actions.
 */
export type SupportedActions = "set-variable" | "set-cookie" | "delete-cookie" | string;

export declare interface RequestProcessOptions {
  /**
   * Whether to run jexl to evaluate variables. Default to true.
   * @default true
   */
  evaluateVariables?: boolean;
  /**
   * Whether to override application variables with system variables
   * @default true
   */
  evaluateSystemVariables?: boolean;
}

export declare interface ResponseProcessOptions {
  /**
   * Whether to run jexl to evaluate variables. Default to true.
   * @default true
   */
  evaluateVariables?: boolean;
  /**
   * Whether to override application variables with system variables
   * @default true
   */
  evaluateSystemVariables?: boolean;
}
